// Generated by Dagger (https://dagger.dev).
package ru.vodolatskii.movies.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.vodolatskii.movies.data.RoomDB;
import ru.vodolatskii.movies.data.dao.MovieDao;
import ru.vodolatskii.movies.data.repositiryImpl.MovieRepositoryImpl;
import ru.vodolatskii.movies.data.repositiryImpl.MovieRepositoryImpl_Factory;
import ru.vodolatskii.movies.data.sharedPref.PreferenceProvider;
import ru.vodolatskii.movies.domain.MovieRepository;
import ru.vodolatskii.movies.presentation.LaunchActivity;
import ru.vodolatskii.movies.presentation.MainActivity;
import ru.vodolatskii.movies.presentation.viewmodels.MoviesViewModel;
import ru.vodolatskii.movies.presentation.viewmodels.MoviesViewModel_Factory;
import ru.vodolatskii.movies.presentation.viewmodels.ViewModelFactory;
import ru.vodolatskii.remote_module.KPApiService;
import ru.vodolatskii.remote_module.RemoteProvider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context context, RemoteProvider remoteProvider) {
      Preconditions.checkNotNull(context);
      Preconditions.checkNotNull(remoteProvider);
      return new AppComponentImpl(new DatabaseModule(), remoteProvider, context);
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final AppComponentImpl appComponentImpl = this;

    private Provider<Context> contextProvider;

    private Provider<RoomDB> provideDBProvider;

    private Provider<MovieDao> provideMovieDaoProvider;

    private Provider<KPApiService> provideRemoteProvider;

    private Provider<PreferenceProvider> provideSharedPreferenceProvider;

    private Provider<MovieRepositoryImpl> movieRepositoryImplProvider;

    private Provider<MovieRepository> provideRepositoryProvider;

    private Provider<MoviesViewModel> moviesViewModelProvider;

    private AppComponentImpl(DatabaseModule databaseModuleParam, RemoteProvider remoteProviderParam,
        Context contextParam) {

      initialize(databaseModuleParam, remoteProviderParam, contextParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final DatabaseModule databaseModuleParam,
        final RemoteProvider remoteProviderParam, final Context contextParam) {
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideDBProvider = DoubleCheck.provider(DatabaseModule_ProvideDBFactory.create(databaseModuleParam, contextProvider));
      this.provideMovieDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideMovieDaoFactory.create(databaseModuleParam, provideDBProvider));
      this.provideRemoteProvider = new ProvideRemoteProvider(remoteProviderParam);
      this.provideSharedPreferenceProvider = DoubleCheck.provider(DatabaseModule_ProvideSharedPreferenceFactory.create(databaseModuleParam, contextProvider));
      this.movieRepositoryImplProvider = MovieRepositoryImpl_Factory.create(provideMovieDaoProvider, provideRemoteProvider, provideSharedPreferenceProvider);
      this.provideRepositoryProvider = DoubleCheck.provider((Provider) movieRepositoryImplProvider);
      this.moviesViewModelProvider = MoviesViewModel_Factory.create(provideRepositoryProvider);
    }

    @Override
    public ViewModelFactory viewModelsFactory() {
      return new ViewModelFactory(moviesViewModelProvider);
    }

    @Override
    public void inject(MainActivity activityMain) {
    }

    @Override
    public void inject(LaunchActivity activityLaunch) {
    }

    private static final class ProvideRemoteProvider implements Provider<KPApiService> {
      private final RemoteProvider remoteProvider;

      ProvideRemoteProvider(RemoteProvider remoteProvider) {
        this.remoteProvider = remoteProvider;
      }

      @Override
      public KPApiService get() {
        return Preconditions.checkNotNullFromComponent(remoteProvider.provideRemote());
      }
    }
  }
}
