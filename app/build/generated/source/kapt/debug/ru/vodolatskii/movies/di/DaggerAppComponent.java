// Generated by Dagger (https://dagger.dev).
package ru.vodolatskii.movies.di;

import android.content.Context;
import com.squareup.moshi.Moshi;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import ru.vodolatskii.movies.data.RoomDB;
import ru.vodolatskii.movies.data.dao.MovieDao;
import ru.vodolatskii.movies.data.repositiryImpl.MovieRepositoryImpl;
import ru.vodolatskii.movies.data.repositiryImpl.MovieRepositoryImpl_Factory;
import ru.vodolatskii.movies.data.service.KPApiService;
import ru.vodolatskii.movies.data.service.TmdbApiService;
import ru.vodolatskii.movies.data.sharedPref.PreferenceProvider;
import ru.vodolatskii.movies.domain.MovieRepository;
import ru.vodolatskii.movies.presentation.LaunchActivity;
import ru.vodolatskii.movies.presentation.MainActivity;
import ru.vodolatskii.movies.presentation.viewmodels.MoviesViewModel;
import ru.vodolatskii.movies.presentation.viewmodels.MoviesViewModel_Factory;
import ru.vodolatskii.movies.presentation.viewmodels.ViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new AppComponentImpl(new RemoteModule(), new DatabaseModule(), context);
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final AppComponentImpl appComponentImpl = this;

    private Provider<Context> contextProvider;

    private Provider<RoomDB> provideDBProvider;

    private Provider<MovieDao> provideMovieDaoProvider;

    private Provider<OkHttpClient> provideHttpClientProvider;

    private Provider<Moshi> provideMoshiProvider;

    private Provider<Retrofit> provideRetrofitKPProvider;

    private Provider<KPApiService> provideKPServiceProvider;

    private Provider<Retrofit> provideRetrofitTMDBProvider;

    private Provider<TmdbApiService> provideKPServiceTMDBProvider;

    private Provider<PreferenceProvider> provideSharedPreferenceProvider;

    private Provider<MovieRepositoryImpl> movieRepositoryImplProvider;

    private Provider<MovieRepository> provideRepositoryProvider;

    private Provider<MoviesViewModel> moviesViewModelProvider;

    private AppComponentImpl(RemoteModule remoteModuleParam, DatabaseModule databaseModuleParam,
        Context contextParam) {

      initialize(remoteModuleParam, databaseModuleParam, contextParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final RemoteModule remoteModuleParam,
        final DatabaseModule databaseModuleParam, final Context contextParam) {
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideDBProvider = DoubleCheck.provider(DatabaseModule_ProvideDBFactory.create(databaseModuleParam, contextProvider));
      this.provideMovieDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideMovieDaoFactory.create(databaseModuleParam, provideDBProvider));
      this.provideHttpClientProvider = DoubleCheck.provider(RemoteModule_ProvideHttpClientFactory.create(remoteModuleParam));
      this.provideMoshiProvider = DoubleCheck.provider(RemoteModule_ProvideMoshiFactory.create(remoteModuleParam));
      this.provideRetrofitKPProvider = DoubleCheck.provider(RemoteModule_ProvideRetrofitKPFactory.create(remoteModuleParam, provideHttpClientProvider, provideMoshiProvider));
      this.provideKPServiceProvider = DoubleCheck.provider(RemoteModule_ProvideKPServiceFactory.create(remoteModuleParam, provideRetrofitKPProvider));
      this.provideRetrofitTMDBProvider = DoubleCheck.provider(RemoteModule_ProvideRetrofitTMDBFactory.create(remoteModuleParam, provideHttpClientProvider, provideMoshiProvider));
      this.provideKPServiceTMDBProvider = DoubleCheck.provider(RemoteModule_ProvideKPServiceTMDBFactory.create(remoteModuleParam, provideRetrofitTMDBProvider));
      this.provideSharedPreferenceProvider = DoubleCheck.provider(DatabaseModule_ProvideSharedPreferenceFactory.create(databaseModuleParam, contextProvider));
      this.movieRepositoryImplProvider = MovieRepositoryImpl_Factory.create(provideMovieDaoProvider, provideKPServiceProvider, provideKPServiceTMDBProvider, provideSharedPreferenceProvider);
      this.provideRepositoryProvider = DoubleCheck.provider((Provider) movieRepositoryImplProvider);
      this.moviesViewModelProvider = MoviesViewModel_Factory.create(provideRepositoryProvider);
    }

    @Override
    public ViewModelFactory viewModelsFactory() {
      return new ViewModelFactory(moviesViewModelProvider);
    }

    @Override
    public void inject(MainActivity activityMain) {
    }

    @Override
    public void inject(LaunchActivity activityLaunch) {
    }
  }
}
