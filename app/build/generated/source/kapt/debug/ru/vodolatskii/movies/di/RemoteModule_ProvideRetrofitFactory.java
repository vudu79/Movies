// Generated by Dagger (https://dagger.dev).
package ru.vodolatskii.movies.di;

import com.squareup.moshi.Moshi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RemoteModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final RemoteModule module;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<Moshi> moshiProvider;

  public RemoteModule_ProvideRetrofitFactory(RemoteModule module,
      Provider<OkHttpClient> clientProvider, Provider<Moshi> moshiProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
    this.moshiProvider = moshiProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, clientProvider.get(), moshiProvider.get());
  }

  public static RemoteModule_ProvideRetrofitFactory create(RemoteModule module,
      Provider<OkHttpClient> clientProvider, Provider<Moshi> moshiProvider) {
    return new RemoteModule_ProvideRetrofitFactory(module, clientProvider, moshiProvider);
  }

  public static Retrofit provideRetrofit(RemoteModule instance, OkHttpClient client, Moshi moshi) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(client, moshi));
  }
}
