// Generated by Dagger (https://dagger.dev).
package ru.vodolatskii.movies.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.vodolatskii.movies.data.RoomDB;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DatabaseModule_ProvideDBFactory implements Factory<RoomDB> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideDBFactory(DatabaseModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public RoomDB get() {
    return provideDB(module, contextProvider.get());
  }

  public static DatabaseModule_ProvideDBFactory create(DatabaseModule module,
      Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideDBFactory(module, contextProvider);
  }

  public static RoomDB provideDB(DatabaseModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideDB(context));
  }
}
